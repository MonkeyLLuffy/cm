package cn.dlb.cm.controller;

import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.dlb.cm.entity.ContractFile;
import cn.dlb.cm.entity.ContractRecord;
import cn.dlb.cm.entity.PageBean;
import cn.dlb.cm.entity.Query_ContractRecord;
import cn.dlb.cm.entity.Record;
import cn.dlb.cm.entity.User;
import cn.dlb.cm.service.contractFile.ContractFileService;
import cn.dlb.cm.service.contractRecord.ContractRecordService;
import cn.dlb.cm.service.record.RecordService;
import cn.dlb.cm.service.user.UserService;
import cn.dlb.cm.tool.EcxcelOperation;
import cn.dlb.cm.tool.FileOperateUtil;

import com.google.gson.Gson;

@Controller
@RequestMapping("/contractRecord")
public class ContractRecordController extends BaseController {

	@Autowired
	private ContractRecordService contractRecordService;
	@Resource
	private UserService userService;
	@Autowired
	private ContractFileService contractFileService;
	@Autowired
	private RecordService recordService;
	
	/**
	 * 方法简述：进入回收站页面
	 * @return
	 * 时间：2016-11-25
	 * 作者：刘群
	 */
	@RequestMapping("/recycleBin.action")
	public String recycleBin(){
		return "/recycleBin.html";
	}
	
	/**
	 * 方法简述：回收站表格数据
	 * @return json数据
	 * 时间：2016-11-24
	 * 作者：刘群
	 */
	@RequestMapping("getRecycleBinData.action")
	@ResponseBody
	public String getRecycleBinData(String condition,String sort,int rows,int page) {
		Map<String, Object> result = contractRecordService.getRecycleBinData(condition,sort,rows,page);
		String resultString = new Gson().toJson(result).toString();
		System.out.println(resultString);
		return resultString;
	}
	
	
	/**
	 * 
	 * 方法描述:增加了高级搜索功能,实现分页效果
	 * @param contractRecord
	 * @param model
	 * @param pageBean
	 * @return 返回显示的界面
	 * 时间:2016-11-28
	 * 作者:路遥
	 */
	@RequestMapping("/advancedSearch.action")
	public String advancedSearch(Query_ContractRecord contractRecord,
			Model model, PageBean pageBean,String importDateSort,String signingDateSort,String deadlineSort
			,String notUpload,String signingDateStart,String signingDateEnd,String importDateStart,String importDateEnd,String deadlineStart,String deadlineEnd) {
		System.out.println(signingDateStart+"--------------------");
		PageBean newPageBean = contractRecordService.findadvancedSearch(
				 contractRecord,pageBean,importDateSort,signingDateSort,deadlineSort,notUpload, signingDateStart ,signingDateEnd, importDateStart, importDateEnd ,deadlineStart, deadlineEnd);
		//返回分页结果和各种查询条件
		model.addAttribute("pageBean", newPageBean);
		model.addAttribute("contractRecord", contractRecord);
		//&importDateSort=${importDateSort}&signingDateSort=${signingDateSort}&deadlineSort=${deadlineSort}
		model.addAttribute("importDateSort",importDateSort);
		model.addAttribute("signingDateSort",signingDateSort);
		model.addAttribute("deadlineSort",deadlineSort);
		model.addAttribute("notUpload",notUpload);
		model.addAttribute("signingDateStart", signingDateStart);
		model.addAttribute("signingDateEnd", signingDateEnd);
		model.addAttribute("importDateStart", importDateStart);
		
		
		//将部门信息和合同类型获取
		List <String> departList=userService.findAllDepart();
		List <String> contractTypeList=userService.findAllContractType();
		
		model.addAttribute("depart", departList);
		model.addAttribute("contractType", contractTypeList);
		return "/contractRecord/dataSummary.jsp";
	}
	
	//批量删除数据,让其进入回收站
	@RequestMapping("/deleteMany.action")
	public String deleteMany(String[] id){
		
		contractRecordService.deleteManyRecord(id);
		return "redirect:/contractRecord/advancedSearch.action";
	}
	
	//将数据记录放进回收站
	@RequestMapping("/deleteContractRecord.action")
	public String deleteContractRecord(String id){
		contractRecordService.deleteContractRecord(id);
		return "redirect:/contractRecord/advancedSearch.action";
	}
	
	/**
	 * 方法简述：月度合同统计数据分析
	 * @param userId
	 * @return
	 * 时间：2016-12-1
	 * 作者：刘群
	 */
	@RequestMapping("monthContractCount.action")
	@ResponseBody
	public String monthContractCount(HttpSession session) {
		User user = (User) session.getAttribute("user");
		Calendar calendar = Calendar.getInstance();
		String lastTime = calendar.get(Calendar.YEAR)+"/"+(calendar.get(Calendar.MONTH));
		String time = calendar.get(Calendar.YEAR)+"/"+(calendar.get(Calendar.MONTH)+1);
		
		Map<String, Object> map = contractRecordService.monthContractCount(user.getId());
		map.put("statisticalData", contractRecordService.getSubCompanyData(user.getId(),time,"%Y/%m"));
		map.put("com_statisData", contractRecordService.getSubCompanyData(user.getId(),lastTime,"%Y/%m"));
		String resultString = new Gson().toJson(map).toString();
		System.out.println(resultString);
		return resultString;
	}
	/**
	 * 方法简述：月度合同统计数据分析
	 * @param userId
	 * @return
	 * 时间：2016-12-1
	 * 作者：刘群
	 */
	@RequestMapping("yearContractCount.action")
	@ResponseBody
	public String yearContractCount(HttpSession session) {
		User user = (User) session.getAttribute("user");
		

		Calendar calendar = Calendar.getInstance();
		String lastTime = (calendar.get(Calendar.YEAR)-1)+"";
		String time = calendar.get(Calendar.YEAR)+"";
		
		Map<String, Object> map = contractRecordService.yearContractCount(user.getId());
		map.put("statisticalData", contractRecordService.getSubCompanyData(user.getId(),time,"%Y"));
		map.put("com_statisData", contractRecordService.getSubCompanyData(user.getId(),lastTime,"%Y"));
		String resultString = new Gson().toJson(map).toString();
		System.out.println(resultString);
		return resultString;
	}
	/**
	 * 方法简述：在数据分析页面的左边页面的：返回名次，签订合同总份数，截止日期
	 * @param userId
	 * @return
	 * 时间：2016-12-1
	 * 作者：刘群
	 */
	@RequestMapping("getSubCompanyData.action")
	@ResponseBody
	public String getSubCompanyData(Integer userId) {
		Map<String, Object> result = contractRecordService.getSubCompanyData(userId,2016+"",2015+"");
		String resultString = new Gson().toJson(result);
		return resultString;
	}
	
	
	/**
	 * 
	 * 方法描述:文件下载
	 * 时间:2016-12-1
	 * 作者:路遥
	 */
	@RequestMapping("/download.action")
	public String download(HttpServletResponse response,@RequestParam("id") String id
			,@RequestParam("type")String type,HttpServletRequest request) {
		
		ContractRecord contractRecord=contractRecordService.getById(id);
		if(contractRecord.getContractFile()==null){
			return "redirect:/contractRecord/advancedSearch.action";
		}else{
		ServletOutputStream out=null;
		//判断下载,并添加记录
		if(type.equals("download")){
			Record record=new Record();
			record.setOperate("download");
			record.setContractRecord(contractRecord);
			record.setTime(new Date());
			record.setType("download");
			record.setUser((User) request.getSession().getAttribute("user"));
			recordService.add(record);
			
			contractRecord.getRecord().add(record);
			contractRecordService.updateContractRecord(contractRecord);
		}
		try {
			out = response.getOutputStream();
			String downloadAddress=contractRecord.getContractFile().getFileAddress();
			FileOperateUtil.download(downloadAddress, out,request,response,type);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
		}
	}
	
	/**
	 * 
	 * 方法描述:文件上传
	 * @param request
	 * @param id
	 * @param remark
	 * @return 上传成功回到主界面
	 * @throws IOException
	 * 时间:2016-12-1
	 * 作者:路遥
	 */
	@RequestMapping(value="/upload.action" ,method=RequestMethod.POST)
	public String getUpload(HttpServletRequest request,
			@RequestParam("id")String id,@RequestParam("remark")String remark) throws IOException{
		Map<String,String> fileItem=FileOperateUtil.upload(request);
		ContractRecord contractRecord=contractRecordService.getById(id);

		ContractFile file=new ContractFile();
		file.setFileName(fileItem.get("fileName"));
		file.setFileAddress(fileItem.get("address"));
		file.setRemark(remark);
		file.setUploadTime(new Date());
		file.setUploader((User) request.getSession().getAttribute("user"));
		file.setContractRecord(contractRecord);
		
		contractFileService.add(file);
		
		
		Record record=new Record();
		record.setOperate("upload");
		record.setContractRecord(contractRecord);
		record.setTime(new Date());
		record.setType("upload");
		record.setUser((User) request.getSession().getAttribute("user"));
		recordService.add(record);
		
		contractRecord.setContractFile(file);
		contractRecord.getRecord().add(record);
		contractRecordService.updateContractRecord(contractRecord);
		
		return "redirect:/contractRecord/advancedSearch.action";
	}
	
	//下载模板
	@RequestMapping("/downloadModel.action")
	public String downloadModel(HttpServletResponse response,HttpServletRequest request){
		
		ServletOutputStream out=null;
		try {
			out = response.getOutputStream();
			String downloadAddress=request.getServletContext().getRealPath("/model/_合同管理数据汇总表模板.xlsx");
			FileOperateUtil.download(downloadAddress, out,request,response,"download");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	//导出数据
	@RequestMapping("/outputData.action")
	public String outputData(String[] id,HttpServletResponse response){
		List<ContractRecord> outputDataList=contractRecordService.getManyById(id);
		try {
			ServletOutputStream outputStream=response.getOutputStream();
			try {
				EcxcelOperation.exportExcel(outputStream,outputDataList);
			} catch (RowsExceededException e) {
				e.printStackTrace();
			} catch (WriteException e) {
				e.printStackTrace();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	//导入数据

		@RequestMapping(value="/inputData.action",method=RequestMethod.POST)
		public String inputData(@RequestParam("file")MultipartFile file){
			try {
				System.out.println(file.getOriginalFilename());
				List <ContractRecord> list=EcxcelOperation.importExcel(file.getInputStream());
				for (ContractRecord contractRecord : list) {
					contractRecordService.add(contractRecord);
					
					//为导入的数据添加记录
					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			return "";
		}
		
		//添加单条数据
		@RequestMapping("/addData.action")
		public String addData(ContractRecord contractRecord,HttpServletRequest request){
			contractRecord.setImportDate(new Date());
			contractRecord.setState(1);
			contractRecordService.add(contractRecord);
			
			Record record=new Record();
			record.setOperate("input");
			record.setContractRecord(contractRecord);
			record.setTime(new Date());
			record.setType("input");
			record.setUser((User) request.getSession().getAttribute("user"));

			recordService.add(record);
			contractRecord.getRecord().add(record);
			contractRecordService.updateContractRecord(contractRecord);
			
			return "redirect:/contractRecord/advancedSearch.action";
		}
		
		@RequestMapping("/baseStatistics.action")
		public String baseStatistics(){
			
			
			return "/baseStatistics/baseStatistics.jsp";
		}
	
}
