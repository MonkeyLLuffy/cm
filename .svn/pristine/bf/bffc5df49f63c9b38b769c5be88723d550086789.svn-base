package cn.dlb.cm.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import cn.dlb.cm.entity.PageBean;
import cn.dlb.cm.entity.Query_ContractRecord;
import cn.dlb.cm.service.contractRecord.ContractRecordService;
import cn.dlb.cm.service.user.UserService;

import com.google.gson.Gson;

@Controller
@RequestMapping("/contractRecord")
public class ContractRecordController extends BaseController {

	@Autowired
	private ContractRecordService contractRecordService;
	@Resource
	private UserService userService;
	
	/**
	 * 方法简述：进入回收站页面
	 * @return
	 * 时间：2016-11-25
	 * 作者：刘群
	 */
	@RequestMapping("/recycleBin.action")
	public String recycleBin(){
		return "/recycleBin.html";
	}
	
	/**
	 * 方法简述：回收站表格数据
	 * @return json数据
	 * 时间：2016-11-24
	 * 作者：刘群
	 */
	@RequestMapping("getRecycleBinData.action")
	@ResponseBody
	public String getRecycleBinData(String condition,int rows,int page) {
		Map<String, Object> result = contractRecordService.getRecycleBinData(condition,rows,page);
		String resultString = new Gson().toJson(result).toString();
		/*List<Map<String, String>> dataList = new ArrayList<Map<String,String>>();
		Map<String, String> map = new HashMap<String, String>();
		map.put("ID", "HT20160719107");
		map.put("CONTRACTNAME", "成都龙泉宝湾国际物流与成都报网仓储服务合同");
		map.put("PARTYA", "成都龙泉宝湾国际物流有限公司");
		map.put("PARTYB", "成都报网供应链管理有限公司");
		map.put("CONTRACTTYPE", "配送");
		map.put("SIGNINGDATE", "2015/12/14");
		map.put("DEADLINE", "2015/12/17");
		map.put("IMPORTDATE", "2015/12/15");
		map.put("CONTRACTAMOUNT", "日20万元");
		map.put("DEPARTMENT", "成都报网");
		map.put("OPERATOR", "吴晓飞");
		map.put("REMARK", "计费面积2058.6平，有补充协议，面积变更");
		map.put("CONTRACTFILEPATH", "http://localhost:8080/cm/……");
		map.put("CONTRACTFILE", "文件名");
		map.put("IMPORTUSER", "刘群");
		
		dataList.add(map);
		dataList.add(map);
		String resultString = new Gson().toJson(dataList).toString();*/
		System.out.println(resultString);
		return resultString;
	}
	
	
	/**
	 * 
	 * 方法描述:增加了高级搜索功能,实现分页效果
	 * @param contractRecord
	 * @param model
	 * @param pageBean
	 * @return 返回显示的界面
	 * 时间:2016-11-28
	 * 作者:路遥
	 */
	@RequestMapping("/advancedSearch.action")
	public String advancedSearch(Query_ContractRecord contractRecord,
			Model model, PageBean pageBean,String importDateSort,String signingDateSort,String deadlineSort,String notUpload) {
		PageBean newPageBean = contractRecordService.findadvancedSearch(
				 contractRecord,pageBean,importDateSort,signingDateSort,deadlineSort,notUpload);
		//返回分页结果和各种查询条件
		model.addAttribute("pageBean", newPageBean);
		model.addAttribute("contractRecord", contractRecord);
		//&importDateSort=${importDateSort}&signingDateSort=${signingDateSort}&deadlineSort=${deadlineSort}
		model.addAttribute("importDateSort",importDateSort);
		model.addAttribute("signingDateSort",signingDateSort);
		model.addAttribute("deadlineSort",deadlineSort);
		model.addAttribute("notUpload",notUpload);
		
		//将部门信息和合同类型获取
		List <String> departList=userService.findAllDepart();
		List <String> contractTypeList=userService.findAllContractType();
		
		model.addAttribute("depart", departList);
		model.addAttribute("contractType", contractTypeList);
		return "/contractRecord/dataSummary.jsp";
	}
	
	//批量删除数据,让其进入回收站
	@RequestMapping("/deleteMany.action")
	public String deleteMany(String[] id){
		
		contractRecordService.deleteManyRecord(id);
		return "redirect:/contractRecord/advancedSearch.action";
	}
	
	//将数据记录放进回收站
	@RequestMapping("/deleteContractRecord.action")
	public String deleteContractRecord(String id){
		contractRecordService.deleteContractRecord(id);
		return "redirect:/contractRecord/advancedSearch.action";
	}
	
	@RequestMapping("/download.action")
	public void download(String fileName, HttpServletRequest request,
			HttpServletResponse response,String type,String id) {
			response.setCharacterEncoding("utf-8");
			response.setContentType("multipart/form-data");
			response.setHeader("Content-Disposition", "attachment;fileName="
			+ fileName);
			OutputStream os = null;
			try {
			String realPath = request.getSession().getServletContext().getRealPath("/file");
			System.out.println(realPath);
			InputStream inputStream = new FileInputStream(new File(realPath
			+ File.separator + fileName));

			os = response.getOutputStream();
			byte[] b = new byte[2048];
			int length = 0;
			while ((length = inputStream.read(b)) != -1) {
			os.write(b, 0, length);
			}

			// 这里主要关闭。
			inputStream.close();
			} catch (FileNotFoundException e) {
			e.printStackTrace();
			} catch (IOException e) {
			e.printStackTrace();
			}finally{
			try {
			if(os != null){
			os.close();
			}
			}catch (IOException e) {
			e.printStackTrace();
			}
			try {
			if (os != null)
			os.flush();
			} catch (IOException e) {
			e.printStackTrace();
			}
		}
	}
	
	@RequestMapping(value="/upload.action" ,method=RequestMethod.POST)
	public String getUpload(@RequestParam("file")MultipartFile  file,@RequestParam("remark")String remark) throws IOException{
		
		System.out.println(file.getOriginalFilename());
		System.out.println(file.getInputStream());
		return "";
	}
}
